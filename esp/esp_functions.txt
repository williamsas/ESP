This converts a string such as ‘2018-05-28T09:33:55.670Z’ into a timestamp within ESP. You just need to make sure the format in timeParse matches up to the input value.

sum(product(timeParse(json(#JSON_Prop,'eventDateTime'),'%Y-%m-%dT%H:%M:%S'),1000000),product(substringAfter(substringBefore(json(#JSON_Prop,'eventDateTime'),'Z'), '.'),1000))

This extracts JSON from a string
<function name="locationType"><![CDATA[json(#JSON_Prop, 'header.originatorHeader.location.type')]]></function>


This is a functional window that puts the two above together.


  <window-functional index="pi_EMPTY" pubsub="true" name="parseActive">
    <schema>
      <fields>
        <field name="key" type="int64" key="true"/>
        <field name="originatorId" type="string"/>
        <field name="sessionId" type="string"/>
        <field name="eventDateTime" type="stamp"/>
      </fields>
    </schema>
    <function-context>
      <properties>
        <property-json name="JSON_Prop"><![CDATA[$msg_body]]></property-json>
      </properties>
      <functions>
        <function name="key"><![CDATA[systemMicro()]]></function>
        <function name="originatorId"><![CDATA[json(#JSON_Prop, 'header.originatorId')]]></function>
        <function name="sessionId"><![CDATA[json(#JSON_Prop, 'header.originatorHeader.sessionId')]]></function>
        <function name="eventDateTime"><![CDATA[sum(product(timeParse(json(#JSON_Prop,'header.originatorHeader.eventDateTime'),'%Y-%m-%dT%H:%M:%S'),1000000),product(substringAfter(substringBefore(json(#JSON_Prop,'header.originatorHeader.eventDateTime'),'Z'), '.'),1000))]]></function>
      </functions>
    </function-context>
  </window-functional>
